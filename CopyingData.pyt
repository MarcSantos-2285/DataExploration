# -*- coding: utf-8 -*-import arcpy, os, sys#DefaultListsfieldType_validation=['Text','Float','Double','Short','Long','Date','Blob','Raster imagery','GUID']class Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "CopyingData"        self.alias = "CopyingData"        # List of tool classes associated with this toolbox        self.tools = [CopySchemaToNewFeatureClass]class CopySchemaToNewFeatureClass(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "CopySchemaToNewFeatureClass"        self.description = ""#Default-LeaveEmpty        self.canRunInBackground = False#Default    def getParameterInfo(self):        """Define parameter definitions"""        p0=arcpy.Parameter(            name="InputFcs",            displayName="1) Input Featureclass/layer to copy",            direction="Input",            datatype="GPFeatureLayer",            parameterType="Required",            category="",        )        p1=arcpy.Parameter(            name="OutputFgdb",            displayName="2) Output File Geodatabase or Dataset where new Featureclass will be saved to",            direction="Input",            datatype="DEDatasetType",            parameterType="Required",            category=""        )        p2 = arcpy.Parameter(            name="OutputFcs",            displayName="3) Output FeatureClass Name",            direction="Input",            datatype="GPString",            parameterType="Required",            category=""        )        params = [p0,p1,p2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        InFcs=parameters[0].value        OutFgdb=parameters[1].valueAsText        OutFcs=parameters[2].valueAsText        desc = arcpy.da.Describe(InFcs)        arcpy.env.workspace=OutFgdb        arcpy.env.overwriteOutput=True        M='Yes'        Z='Yes'        for i in ["MZtest"]:            if desc['table']['hasM']==False and desc['table']['hasZ']==False:                M=Z='No'            elif desc['table']['hasM']==True and desc['table']['hasZ']==False:                Z='No'            elif desc['table']['hasM']==False and desc['table']['hasZ']==True:                M='No'            else:                pass        arcpy.management.CreateFeatureclass(OutFgdb,OutFcs, desc['shapeType'],"",M,Z,desc['table']['spatialReference'])        CreateFcsResult=os.path.join(OutFgdb,OutFcs)        InFields=arcpy.ListFields(InFcs)        for i in InFields:            if i.name.lower() not in ['objectid', 'shape']:                inTable=CreateFcsResult                fieldName=i.name                fieldType=i.type                for ii in ["FieldTypeTest"]:                    if i.type not in fieldType_validation:                        if i.type=='String':                            fieldType="Text"                        elif i.type=='GlobalID':                            fieldType='GUID'                        elif i.type=='Integer':                            fieldType='Short'                        else:                            fieldType="Text"                        arcpy.AddMessage("Field type for '{}' was {}, but is being copied as {}\n".format(i.name,i.type,fieldType))                    else:                        continue                field_precision=i.precision                field_scale=i.scale                field_length=i.length                field_alias=i.aliasName                field_is_nullable=i.isNullable                field_is_required=i.required                field_domain=i.domain                try:                    arcpy.management.AddField(inTable, fieldName, fieldType, field_precision, field_scale,                                          field_length, field_alias, field_is_nullable, field_is_required,                                          field_domain)                except Exception:                    e = sys.exc_info()[1]                    arcpy.AddError("{} tripped following error: \n{}\n".format(i,e.args[0]))        return